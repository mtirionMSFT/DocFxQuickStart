### YamlMime:ManagedReference
items:
- uid: DocLinkChecker.Domain.CommandlineOptions
  commentId: T:DocLinkChecker.Domain.CommandlineOptions
  id: CommandlineOptions
  parent: DocLinkChecker.Domain
  children:
  - DocLinkChecker.Domain.CommandlineOptions.Attachments
  - DocLinkChecker.Domain.CommandlineOptions.Cleanup
  - DocLinkChecker.Domain.CommandlineOptions.DocFolder
  - DocLinkChecker.Domain.CommandlineOptions.Table
  - DocLinkChecker.Domain.CommandlineOptions.Verbose
  langs:
  - csharp
  - vb
  name: CommandlineOptions
  nameWithType: CommandlineOptions
  fullName: DocLinkChecker.Domain.CommandlineOptions
  type: Class
  source:
    remote:
      path: QuickStart/src/DocLinkChecker/Domain/CommandLineOptions.cs
      branch: master
      repo: https://github.com/mtirionMSFT/DocFxQuickStart.git
    id: CommandlineOptions
    path: src/DocLinkChecker/Domain/CommandLineOptions.cs
    startLine: 10
  assemblies:
  - DocLinkChecker
  namespace: DocLinkChecker.Domain
  summary: "\nClass for command line options.\n"
  example: []
  syntax:
    content: public class CommandlineOptions
    content.vb: Public Class CommandlineOptions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: DocLinkChecker.Domain.CommandlineOptions.DocFolder
  commentId: P:DocLinkChecker.Domain.CommandlineOptions.DocFolder
  id: DocFolder
  parent: DocLinkChecker.Domain.CommandlineOptions
  langs:
  - csharp
  - vb
  name: DocFolder
  nameWithType: CommandlineOptions.DocFolder
  fullName: DocLinkChecker.Domain.CommandlineOptions.DocFolder
  type: Property
  source:
    remote:
      path: QuickStart/src/DocLinkChecker/Domain/CommandLineOptions.cs
      branch: master
      repo: https://github.com/mtirionMSFT/DocFxQuickStart.git
    id: DocFolder
    path: src/DocLinkChecker/Domain/CommandLineOptions.cs
    startLine: 15
  assemblies:
  - DocLinkChecker
  namespace: DocLinkChecker.Domain
  summary: "\nGets or sets the folder with documents.\n"
  example: []
  syntax:
    content: >-
      [Option('d', "docfolder", Required = true, HelpText = "Folder containing the documents.")]

      public string DocFolder { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <Option("d"c, "docfolder", Required:=True, HelpText:="Folder containing the documents.")>

      Public Property DocFolder As String
  overload: DocLinkChecker.Domain.CommandlineOptions.DocFolder*
  attributes:
  - type: CommandLine.OptionAttribute
    ctor: CommandLine.OptionAttribute.#ctor(System.Char,System.String)
    arguments:
    - type: System.Char
      value: d
    - type: System.String
      value: docfolder
    namedArguments:
    - name: Required
      type: System.Boolean
      value: true
    - name: HelpText
      type: System.String
      value: Folder containing the documents.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: DocLinkChecker.Domain.CommandlineOptions.Verbose
  commentId: P:DocLinkChecker.Domain.CommandlineOptions.Verbose
  id: Verbose
  parent: DocLinkChecker.Domain.CommandlineOptions
  langs:
  - csharp
  - vb
  name: Verbose
  nameWithType: CommandlineOptions.Verbose
  fullName: DocLinkChecker.Domain.CommandlineOptions.Verbose
  type: Property
  source:
    remote:
      path: QuickStart/src/DocLinkChecker/Domain/CommandLineOptions.cs
      branch: master
      repo: https://github.com/mtirionMSFT/DocFxQuickStart.git
    id: Verbose
    path: src/DocLinkChecker/Domain/CommandLineOptions.cs
    startLine: 21
  assemblies:
  - DocLinkChecker
  namespace: DocLinkChecker.Domain
  summary: "\nGets or sets a value indicating whether verbose information is shown in the output.\n"
  example: []
  syntax:
    content: >-
      [Option('v', "verbose", Required = false, HelpText = "Show verbose messages.")]

      public bool Verbose { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <Option("v"c, "verbose", Required:=False, HelpText:="Show verbose messages.")>

      Public Property Verbose As Boolean
  overload: DocLinkChecker.Domain.CommandlineOptions.Verbose*
  attributes:
  - type: CommandLine.OptionAttribute
    ctor: CommandLine.OptionAttribute.#ctor(System.Char,System.String)
    arguments:
    - type: System.Char
      value: v
    - type: System.String
      value: verbose
    namedArguments:
    - name: Required
      type: System.Boolean
      value: false
    - name: HelpText
      type: System.String
      value: Show verbose messages.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: DocLinkChecker.Domain.CommandlineOptions.Attachments
  commentId: P:DocLinkChecker.Domain.CommandlineOptions.Attachments
  id: Attachments
  parent: DocLinkChecker.Domain.CommandlineOptions
  langs:
  - csharp
  - vb
  name: Attachments
  nameWithType: CommandlineOptions.Attachments
  fullName: DocLinkChecker.Domain.CommandlineOptions.Attachments
  type: Property
  source:
    remote:
      path: QuickStart/src/DocLinkChecker/Domain/CommandLineOptions.cs
      branch: master
      repo: https://github.com/mtirionMSFT/DocFxQuickStart.git
    id: Attachments
    path: src/DocLinkChecker/Domain/CommandLineOptions.cs
    startLine: 27
  assemblies:
  - DocLinkChecker
  namespace: DocLinkChecker.Domain
  summary: "\nGets or sets a value indicating whether we need to check .attachments folder for unreferenced files.\n"
  example: []
  syntax:
    content: >-
      [Option('a', "attachments", Required = false, HelpText = "Check unreferenced files in .attachments.")]

      public bool Attachments { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <Option("a"c, "attachments", Required:=False, HelpText:="Check unreferenced files in .attachments.")>

      Public Property Attachments As Boolean
  overload: DocLinkChecker.Domain.CommandlineOptions.Attachments*
  attributes:
  - type: CommandLine.OptionAttribute
    ctor: CommandLine.OptionAttribute.#ctor(System.Char,System.String)
    arguments:
    - type: System.Char
      value: a
    - type: System.String
      value: attachments
    namedArguments:
    - name: Required
      type: System.Boolean
      value: false
    - name: HelpText
      type: System.String
      value: Check unreferenced files in .attachments.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: DocLinkChecker.Domain.CommandlineOptions.Cleanup
  commentId: P:DocLinkChecker.Domain.CommandlineOptions.Cleanup
  id: Cleanup
  parent: DocLinkChecker.Domain.CommandlineOptions
  langs:
  - csharp
  - vb
  name: Cleanup
  nameWithType: CommandlineOptions.Cleanup
  fullName: DocLinkChecker.Domain.CommandlineOptions.Cleanup
  type: Property
  source:
    remote:
      path: QuickStart/src/DocLinkChecker/Domain/CommandLineOptions.cs
      branch: master
      repo: https://github.com/mtirionMSFT/DocFxQuickStart.git
    id: Cleanup
    path: src/DocLinkChecker/Domain/CommandLineOptions.cs
    startLine: 33
  assemblies:
  - DocLinkChecker
  namespace: DocLinkChecker.Domain
  summary: "\nGets or sets a value indicating whether to cleanup unreferenced files in .attachments.\n"
  example: []
  syntax:
    content: >-
      [Option('c', "cleanup", Required = false, HelpText = "Cleanup unreferenced files in .attachments.")]

      public bool Cleanup { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <Option("c"c, "cleanup", Required:=False, HelpText:="Cleanup unreferenced files in .attachments.")>

      Public Property Cleanup As Boolean
  overload: DocLinkChecker.Domain.CommandlineOptions.Cleanup*
  attributes:
  - type: CommandLine.OptionAttribute
    ctor: CommandLine.OptionAttribute.#ctor(System.Char,System.String)
    arguments:
    - type: System.Char
      value: c
    - type: System.String
      value: cleanup
    namedArguments:
    - name: Required
      type: System.Boolean
      value: false
    - name: HelpText
      type: System.String
      value: Cleanup unreferenced files in .attachments.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: DocLinkChecker.Domain.CommandlineOptions.Table
  commentId: P:DocLinkChecker.Domain.CommandlineOptions.Table
  id: Table
  parent: DocLinkChecker.Domain.CommandlineOptions
  langs:
  - csharp
  - vb
  name: Table
  nameWithType: CommandlineOptions.Table
  fullName: DocLinkChecker.Domain.CommandlineOptions.Table
  type: Property
  source:
    remote:
      path: QuickStart/src/DocLinkChecker/Domain/CommandLineOptions.cs
      branch: master
      repo: https://github.com/mtirionMSFT/DocFxQuickStart.git
    id: Table
    path: src/DocLinkChecker/Domain/CommandLineOptions.cs
    startLine: 39
  assemblies:
  - DocLinkChecker
  namespace: DocLinkChecker.Domain
  summary: "\nGets or sets a value indicating whether to check that tables are well formed.\n"
  example: []
  syntax:
    content: >-
      [Option('t', "table", Required = false, HelpText = "Check that tables are well formed.")]

      public bool Table { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <Option("t"c, "table", Required:=False, HelpText:="Check that tables are well formed.")>

      Public Property Table As Boolean
  overload: DocLinkChecker.Domain.CommandlineOptions.Table*
  attributes:
  - type: CommandLine.OptionAttribute
    ctor: CommandLine.OptionAttribute.#ctor(System.Char,System.String)
    arguments:
    - type: System.Char
      value: t
    - type: System.String
      value: table
    namedArguments:
    - name: Required
      type: System.Boolean
      value: false
    - name: HelpText
      type: System.String
      value: Check that tables are well formed.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: DocLinkChecker.Domain
  commentId: N:DocLinkChecker.Domain
  name: DocLinkChecker.Domain
  nameWithType: DocLinkChecker.Domain
  fullName: DocLinkChecker.Domain
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DocLinkChecker.Domain.CommandlineOptions.DocFolder*
  commentId: Overload:DocLinkChecker.Domain.CommandlineOptions.DocFolder
  name: DocFolder
  nameWithType: CommandlineOptions.DocFolder
  fullName: DocLinkChecker.Domain.CommandlineOptions.DocFolder
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: DocLinkChecker.Domain.CommandlineOptions.Verbose*
  commentId: Overload:DocLinkChecker.Domain.CommandlineOptions.Verbose
  name: Verbose
  nameWithType: CommandlineOptions.Verbose
  fullName: DocLinkChecker.Domain.CommandlineOptions.Verbose
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: DocLinkChecker.Domain.CommandlineOptions.Attachments*
  commentId: Overload:DocLinkChecker.Domain.CommandlineOptions.Attachments
  name: Attachments
  nameWithType: CommandlineOptions.Attachments
  fullName: DocLinkChecker.Domain.CommandlineOptions.Attachments
- uid: DocLinkChecker.Domain.CommandlineOptions.Cleanup*
  commentId: Overload:DocLinkChecker.Domain.CommandlineOptions.Cleanup
  name: Cleanup
  nameWithType: CommandlineOptions.Cleanup
  fullName: DocLinkChecker.Domain.CommandlineOptions.Cleanup
- uid: DocLinkChecker.Domain.CommandlineOptions.Table*
  commentId: Overload:DocLinkChecker.Domain.CommandlineOptions.Table
  name: Table
  nameWithType: CommandlineOptions.Table
  fullName: DocLinkChecker.Domain.CommandlineOptions.Table
